public class Card implements Comparable<Card> {
    
    public static final int CLUB = 0;
    public static final int DIAMOND = 1;
    public static final int HEART = 2;
    public static final int SPADE = 3;

   
    private int rank;
    private int suit;
    private boolean faceUp;

   
    public Card(int rank, int suit, boolean faceUp) {
        this.rank = rank;
        this.suit = suit;
        this.faceUp = faceUp;
    }

    /**
     * @return whether the card is face up
     */
    public boolean isFaceUp() {
        return this.faceUp;
    }

    /**
     * Set the face-up status of the card.
     * @param faceUp the new face-up status
     */
    public void setFaceUp(boolean faceUp) {
        this.faceUp = faceUp;
    }

    /**
     * @return the rank of the card
     */
    public int getRank() {
        return this.rank;
    }

    /**
     * @return the suit of the card
     */
    public int getSuit() {
        return this.suit;
    }

    @Override
    public boolean equals(Object ob) {
        if (!(ob instanceof Card)) {
            return false;
        }
        Card c = (Card) ob;
        return this.rank == c.rank && this.suit == c.suit;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + this.getRank();
        hash = 31 * hash + this.getSuit();
        return hash;
    }

    @Override
    public int compareTo(Card c) {
        if (this.rank < c.rank) {
            return -1;
        } else if (this.rank > c.rank) {
            return 1;
        } else {
            return Integer.compare(this.suit, c.suit);
        }
    }

    /**
     * Return the rank as a String. For example, the 3 of Hearts produces the String "3".
     * The King of Diamonds produces the String "King".
     * @return the rank String
     */
    public String getRankString() {
        switch (this.rank) {
            case 11:
                return "Jack";
            case 12:
                return "Queen";
            case 13:
                return "King";
            case 14:
                return "Ace";
            default:
                return String.valueOf(this.rank);
        }
    }

    /**
     * Return the suit as a String: "Clubs", "Diamonds", "Hearts" or "Spades".
     * @return the suit String
     */
    public String getSuitString() {
        switch (this.suit) {
            case CLUB:
                return "Clubs";
            case DIAMOND:
                return "Diamonds";
            case HEART:
                return "Hearts";
            case SPADE:
                return "Spades";
            default:
                return "Unknown";
        }
    }

    /**
     * Return "?" if the card is facedown; otherwise, the rank and suit of the card.
     * @return the String representation
     */
    @Override
    public String toString() {
        if (!this.faceUp) {
            return "?";
        }
        return getRankString() + " of " + getSuitString();
    }

    public static void main(String[] args) {
        // Create 5 of clubs
        Card club5 = new Card(5, CLUB, true);
        System.out.println("club5: " + club5);  // Output: 5 of Clubs
        
        // Create Ace of Spades
        Card spadeAce = new Card(14, SPADE, true);
        System.out.println("spadeAce: " + spadeAce);  // Output: Ace of Spades
        
        // Compare the two cards
        System.out.println("club5 compareTo spadeAce: " + club5.compareTo(spadeAce));  // Should be negative
        System.out.println("club5 compareTo club5: " + club5.compareTo(club5));  // Should be 0
        
        // Check if they are equal
        System.out.println("club5 equals spadeAce: " + club5.equals(spadeAce));  // Should be false
        System.out.println("club5 equals club5: " + club5.equals(club5));  // Should be true
    }
}
